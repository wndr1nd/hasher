Программа разделена на 2 части, без графики, и с использованием GUI.
Основная часть кода написана с использованием только STL.
Часть ответственная за графику в основном написана в mainwindow.cpp

main.cpp

В main.cpp используется функция FreeConsole() для windows для удобства работы с GUI.
так же используется функция main_win() которая передает созданное окно по ссылке в часть без графики для вывода текущего обрабатываемого файла.
Если программе был передан параметр или она собрана без графики, то вызывается cmd_handler который обрабатывает параметры и вызывает нужную функцию.

mainwindow.cpp

Часть ответственная за графику в основном находится тут.
С помощью QFileSystemModel отображается файловая система.
Вектор alg_vec используется для передачи выбранных алгоритмов пользователем в часть без графики.
Функция check_param проверяет выбранные пользователем параметры и заполняет вектор.
Функция set_log выводит текущий обрабатываемый файл с помощью appendPlainText,
затем с помощью textCursor() устанавливает курсор в конец для более удобного просмотра.
Функция on_list_doubleClicked отвечает за перемещение по файловой системе с помощью двойного нажатия.
Функция on_pushButton_clicked отвечает за подсчет контрольных сумм, вызывает функцию start_hash из части без графики.
Функция on_check_hash_clicked отвечает за проверку хэшей в файлах, вызывает функцию check_hash из части без графики.
Функция on_check_files_clicked отвечает за проверку файлов, вызывает функцию check_file из части без графики.
Функция on_delete_2_clicked отвечает за удаление файлов, создает диалоговое окно с помощью QDialog, так же создает две кнопки(связанных с двумя сигналами) и группируется все с помощью QFormLayout. Если пользователь подтвердил удаление вызывается функция delete_hash из части без графики.

no_gui.cpp

Основная логика программы написана здесь.
Вектор window_vec заполнется одним значением(текущим окном) если программа запущена с графикой.
Вектор file_path содержит все пути к файлам.
Вектор threads отвечает за join потоков.
Вектор vec содержит алгоритмы.
Функция get_path заполняет вектор file_path таким образом что сначала идут файлы из директории затем сама директория.
В функции start_hash, gui_vec отвечает за алгоритмы переданные из части с графикой.
quantity - колличество потоков.
rel_path - относитьльный путь.
Так как графическое приложение по сути работает в одном графическом потоке(QCoreApplication - запускает цикл обработки событий основного потока)
то для отображения текущего обрабатываемого файла можно использовать processEvents() 
QCoreApplication::processEvents() позволяет основному графическому потоку обработать события(такие как вывод информации).
Т.е вызывая processEvents() каждый раз после вызова set_log, информация отображается корректно.
Функция clear_thread присоединяет все потоки к основному.
Функция check_argv проверяе параметры переданные через консоль.
Функция fill_vec заполняет вектор классами алгоритмов.
Функция prepare_check заполняет переданный вектор out путями до файлов hash.<алгоритм>, если передан вектор currHash то заполняет его классами алгоритмов с которыми предстоит работать.
Функция check_hash проверяет контрольные суммы.
Функция check_available открывает файл hash.<алгоритм> и считывает из него только название файлов и заполняет переданный вектор files_vector ими.
Функция check_file проверяет наличие посторонних файлов.
Используя 3 цикла, первый проходит по всем директориям, второй по всем файлам в этих директориях, третий по файлам hash.<алгоритм>

Ihash.h

является базовым классом для классов алгоритмов.
hash_vector заполняется хэшами при их проверке, используется в функции check_hash
Функция start_hashing начинает подсчет контрольных сумм.
Функция check_hashing подсчитывает и заполняет вектор hash_vector контрольными суммами.
Функция isEqual открывает уже существующие файлы с контрольными суммами и построчно(до названия файла) сверяет их с суммами из вектора. При успешной проверке сумма удаляется из вектора.Для успешного завершения вектор должен стать пустым, но если функция была вызвана, а вектор уже путой то это считается ошибкой.
Классы crc32 md5 sha1 sha256, являются частью портативной библиотеки и имеют стандартные функции(get_hash, add, reset). Для удобства была добавлена функция get_name, которая возвращает название файла для конкретного алгоритма(hash.md5, hash.sha1, hash.sha256, hash.crc32)
